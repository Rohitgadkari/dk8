ASS 1

////////SET A-1 simple chatbot-///////

import random

def simple_chatbot():
    greetings = ["Hello!", "Hi there!", "Greetings!", "Hey!"]
    print(random.choice(greetings))

    while True:
        user_input = input("You: ").lower()
        if user_input == 'exit':
            print("Goodbye!")
            break
        if "how are you" in user_input:
            print("I'm just a student")
        elif "your name" in user_input:
            print("I am a Simple Chatbot.")
        elif "what is your age" in user_input:
            print("I am Just Born.")
        elif "hello" in user_input or "hi" in user_input:
            print("Hello! How can I help you?")
        else:
            print("I'm sorry, I didn't understand that.")

if __name__ == "__main__":
    simple_chatbot()

//////////Q2 BFS Travels////////// 

from collections import defaultdict, deque

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def bfs(self, start):
        visited = set()
        queue = deque([start])
        
        
        
         

        while queue:
            vertex = queue.popleft()
            if vertex not in visited:
                print(vertex, end=" ")
                visited.add(vertex)
                queue.extend(self.graph[vertex])


g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 0)
g.add_edge(2, 3)
g.add_edge(3, 3)


print("BFS Traversal starting from vertex 0:")
g.bfs(0)

//////////////Q3 DFS Traversal///////////////////


class Graph:

    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def addEdge(self, u, v):
        self.graph.append([u, v])

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=' ')

        for neighbor in self.graph:
            if neighbor[0] == v and neighbor[1] not in visited:
                self.DFSUtil(neighbor[1], visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

g = Graph(4)
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)

print("Depth First Traversal (start vertex 0):")
g.DFS(0)

//////////////////Q4 Water jug problem//////////////////////////////
#set a.4

def water_jug_problem(capacity_a, capacity_b, target):
    state_a, state_b = 0, 0  
    print(f"Initial State: Jug A={state_a}, Jug B={state_b}")

    while state_a != target or state_b != target:
        # Fill jug A to its full capacity
        if state_a < capacity_a:
            state_a = capacity_a
            print(f"Fill Jug A: Jug A={state_a}, Jug B={state_b}")

        # Pour water from jug A to jug B
        pour = min(state_a, capacity_b - state_b)
        state_a -= pour
        state_b += pour
        print(f"Pour water from Jug A to Jug B: Jug A={state_a}, Jug B={state_b}")

        # Check if the target is reached
        if state_a == target or state_b == target:
            break

        # Empty jug B
        if state_b == capacity_b:
            state_b = 0
            print(f"Empty Jug B: Jug A={state_a}, Jug B={state_b}")
            
            
        # Pour water from jug B to jug A
        pour = min(state_b, capacity_a - state_a)
        state_a += pour
        state_b -= pour
        print(f"Pour water from Jug B to Jug A: Jug A={state_a}, Jug B={state_b}")

        
        # Pour water from jug A to jug B
        pour = min(state_a, capacity_b - state_b)
        state_a -= pour
        state_b += pour
        print(f"Pour water from Jug A to Jug B: Jug A={state_a}, Jug B={state_b}")
        

    print(f"Target reached! Jug A={state_a}, Jug B={state_b}")

# Example Usage:
if __name__ == "__main__":
    water_jug_problem(4, 3, 2)







/////////////////////////#Best First search //////
from queue import PriorityQueue
v = 6
graph = [[] for i in range(v)]



def best_first_search(actual_Src, target, n):
    visited = [False] * n
    pq = PriorityQueue()
    pq.put((0,actual_Src))
    visited[actual_Src] = True
    
    while pq.empty() == False:
        u = pq.get()[1]

        print(u, end=" ")
        if u == target:
            break

        for v, c in graph[u]:
            if visited[v] == False:
                visited[v] = True
                pq.put((c, v))
    print()

# Function for adding edges to graph


def addedge(x, y, cost):
    graph[x].append((y, cost))
    graph[y].append((x, cost))



#addedge(x,y,cost);
addedge(0, 1, 1)
addedge(0, 2, 2)
addedge(1, 3, 5)
addedge(1, 4, 4)
addedge(2, 5, 6)


source = 0
target = 5
best_first_search(source, target, v)





from collections import deque

class Graph:
   

    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def get_neighbors(self, v):
        return self.adjacency_list[v]

  
    def h(self, n):
        H = {
            'A': 1,
            'B': 1,
            'C': 1,
            'D': 1
        }

        return H[n]

    def a_star_algorithm(self, start_node, stop_node):
    
        open_list = set([start_node])
        closed_list = set([])



        g = {}

        g[start_node] = 0


        parents = {}
        parents[start_node] = start_node

        while len(open_list) > 0:
            n = None


            for v in open_list:
                if n == None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v;

            if n == None:
                print('Path does not exist!')
                return None



            if n == stop_node:
                reconst_path = []

                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]

                reconst_path.append(start_node)

                reconst_path.reverse()

                print('Path found: {}'.format(reconst_path))
                return reconst_path

         
            for (m, weight) in self.get_neighbors(n):
 
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight

                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n

                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

    
            open_list.remove(n)
            closed_list.add(n)

        print('Path does not exist!')
        return None
    
adjacency_list = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('D', 5)],
    'C': [('D', 12)]
}
graph1 = Graph(adjacency_list)
graph1.a_star_algorithm('A', 'D')